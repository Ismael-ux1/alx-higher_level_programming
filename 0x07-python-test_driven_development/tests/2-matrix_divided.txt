>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Check if div is int or float
>>> matrix = [[2, 4, 6]]
>>> div = "invalid"
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: div must be a number
>>> div = None
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Check if div is 0
>>> matrix = [[2, 4, 6]]
>>> div = 0
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Check for list with one list.
>>> matrix = [[2, 4, 6]]
>>> matrix_divided(matrix, 3)
[[0.67, 1.33, 2.0]]

# Check for list with two lists
>>> matrix = [[2, 4, 6], [8, 10, 12]]
>>> matrix_divided(matrix, 3)
[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]

# Check for list with lists of different length
>>> matrix = [[2, 4, 6, 8], [10, 12]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[2, 4, 6], [8, 10, 12, 14]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Check for +ve infinity
>>> matrix = [[2, 4, 6], [8, 10, 12]]
>>> matrix_divided(matrix, float("inf"))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

# Check for a matrix with negative and floating-point numbers
>>> matrix = [
...     [-2, 3.5, 4],
...     [6, -7, 8],
...     [9, 10, -11.2]
... ]
>>> div = 3.5
>>> matrix_divided(matrix, div)
[[-0.57, 1.0, 1.14], [1.71, -2.0, 2.29], [2.57, 2.86, -3.2]]

# Check for one argument missing
>>> matrix = [[2, 4, 6]]
>>> matrix_divided(matrix)
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Check for both arguments missing
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

