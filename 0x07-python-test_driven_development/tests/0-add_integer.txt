===========================
How to Use 0-add_integer.py
===========================

This module defines a function ``add_integer(a, b=98)``. that prforms integer addition.

Usage
=====

``add_integer(...)``` returns the sum of its two arguments. for numbers, this is the same as using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 5)
    9

::

    >>> add_integer(4, -5)
    -1

The function can also handle floating-point values.

::

    >>> add_integer(4.0, 5.0)
    9

Note that floats are converted to ints before addition is done.

::

    >>> add_integer(4.9, 0.2)
    4

::

    >>> add_integer(-4.9, -0.2)
    -4

Floating and non-floating point values can be combined.

::

    >>> add_integer(4.3, -5)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(4)
    102

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hi", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, "hi")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hi", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(4, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
